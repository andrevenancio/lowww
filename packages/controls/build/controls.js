(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory((global.lowww = global.lowww || {}, global.lowww.controls = {})));
}(this, function (exports) { 'use strict';

  /**
   * Common utilities
   * @module glMatrix
   */
  var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
  if (!Math.hypot) Math.hypot = function () {
    var y = 0,
        i = arguments.length;

    while (i--) {
      y += arguments[i] * arguments[i];
    }

    return Math.sqrt(y);
  };

  /**
   * 3 Dimensional Vector
   * @module vec3
   */

  /**
   * Creates a new, empty vec3
   *
   * @returns {vec3} a new 3D vector
   */

  function create() {
    var out = new ARRAY_TYPE(3);

    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }

    return out;
  }
  /**
   * Set the components of a vec3 to the given values
   *
   * @param {vec3} out the receiving vector
   * @param {Number} x X component
   * @param {Number} y Y component
   * @param {Number} z Z component
   * @returns {vec3} out
   */

  function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  /**
   * Perform some operation over an array of vec3s.
   *
   * @param {Array} a the array of vectors to iterate over
   * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
   * @param {Number} offset Number of elements to skip at the beginning of the array
   * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
   * @param {Function} fn Function to call for each vector in the array
   * @param {Object} [arg] additional argument to pass to fn
   * @returns {Array} a
   * @function
   */

  var forEach = function () {
    var vec = create();
    return function (a, stride, offset, count, fn, arg) {
      var i, l;

      if (!stride) {
        stride = 3;
      }

      if (!offset) {
        offset = 0;
      }

      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }

      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }

      return a;
    };
  }();

  function clamp(value, min, max) {
      return Math.max(Math.min(value, max), min);
  }

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var offset = -Math.PI * 0.5;

  var OrbitControls = function () {
      function OrbitControls(camera, domElement) {
          var _this = this;

          classCallCheck(this, OrbitControls);

          this.onStart = function (event) {
              event.preventDefault();

              _this.oy = _this.ry;
              _this.ox = _this.rx;

              _this.startY = event.pageX / _this.width;
              _this.startX = event.pageY / _this.height;

              _this.isDown = true;
          };

          this.onMove = function (event) {
              if (_this.isDown) {
                  var y = event.pageX / _this.width;
                  var x = event.pageY / _this.height;
                  _this.rx = _this.ox + -(_this.startX - x) * _this.rotationSpeed;
                  _this.ry = _this.oy + (_this.startY - y) * _this.rotationSpeed;
                  _this.rx = clamp(_this.rx, -Math.PI * 0.5, Math.PI * 0.5);

                  // when user uses 2 fingers, zoom in / out.
                  if (event.touches && event.changedTouches.length > 1) {
                      var one = event.changedTouches[0];
                      var two = event.changedTouches[1];
                      _this.curDiff = _this.pinchMode(one.clientX, one.clientY, two.clientX, two.clientY);

                      var amount = 0;
                      if (_this.curDiff > _this.oldDiff) {
                          amount = -100;
                      } else {
                          amount = 100;
                      }

                      _this.zoom(amount);
                      _this.oldDiff = _this.curDiff;
                  }
              }
          };

          this.onEnd = function () {
              _this.isDown = false;
              _this.oldDiff = -1;
          };

          this.onWheel = function (event) {
              event.preventDefault();
              _this.zoom(-event.deltaY);
          };

          this.camera = camera;
          this.domElement = domElement;

          this.radius = Math.max(camera.position.x, camera.position.z);

          this.rx = Math.atan2(camera.position.y, this.radius);
          this.ry = Math.atan2(camera.position.z, camera.position.x) + offset;

          this.ox = 0;
          this.oy = 0;

          this.width = window.innerWidth;
          this.height = window.innerHeight;

          // rotation
          this.rotationSpeed = 5 * window.devicePixelRatio;

          // zoom
          this.zoomMin = 0.1;
          this.zoomMax = Infinity;
          this.zoomSpeed = 100;

          this.isDown = false;

          // cache
          this.curDiff = 0;
          this.oldDiff = -1;

          this.enable();
      }

      createClass(OrbitControls, [{
          key: 'enable',
          value: function enable() {
              this.domElement.addEventListener('mousedown', this.onStart, false);
              this.domElement.addEventListener('mousemove', this.onMove, false);
              this.domElement.addEventListener('mouseup', this.onEnd, false);
              this.domElement.addEventListener('touchstart', this.onStart, false);
              this.domElement.addEventListener('touchmove', this.onMove, false);
              this.domElement.addEventListener('touchend', this.onEnd, false);
              this.domElement.addEventListener('wheel', this.onWheel, false);
          }
      }, {
          key: 'disable',
          value: function disable() {
              this.domElement.removeEventListener('mousedown', this.onStart, false);
              this.domElement.removeEventListener('mousemove', this.onMove, false);
              this.domElement.removeEventListener('mouseup', this.onEnd, false);
              this.domElement.removeEventListener('touchstart', this.onStart, false);
              this.domElement.removeEventListener('touchmove', this.onMove, false);
              this.domElement.removeEventListener('touchend', this.onEnd, false);
              this.domElement.removeEventListener('wheel', this.onWheel, false);
          }
      }, {
          key: 'pinchMode',
          value: function pinchMode(x1, y1, x2, y2) {
              return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
          }
      }, {
          key: 'zoom',
          value: function zoom(delta) {
              this.radius += delta / 1000 * this.zoomSpeed;
              this.radius = clamp(this.radius, this.zoomMin, this.zoomMax);
          }
      }, {
          key: 'update',
          value: function update() {
              var y = this.radius * Math.sin(this.rx);
              var r = this.radius * Math.cos(this.rx);
              var x = Math.sin(this.ry) * r;
              var z = Math.cos(this.ry) * r;
              set(this.camera.position.data, x, y, z);
          }
      }]);
      return OrbitControls;
  }();

  exports.Orbit = OrbitControls;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
